What happens when you initialize a repository? Why do you need to do it?        

    After initializing a repository, a hidden directory called .git will be
created. This .git direcory will contain metadata for commit histories relating
to files in this repository. Doing this will change an ordinary directory into
a repository that can save different versions for each commit. 

How is the staging area different from the working directory and the repository? What value do you think it offers?

    Staging area is the intermediate place where you put the changes you want to 
commit at once together. It is in between of the working directory and the  
repository sinces files are modified in the working directory, then they are 
collected and organized in the staging area and at last, the changes are stored 
in repository. The value it offers is a way to group many changes into one  
commit to make each commit reflect one logical change. 

How can you use the staging area to make sure you have one commit per logical
change?

    I can put all the files modified for one logical change into staging area at 
once and in this way, they will be grouped together for one commit. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
  
    Branches would be helpful when I want to parallely test different versions
of code. For example, when I am doing a machine learning project and I have my
data preprocessed, now I need to implement different algorithms, I can create
a branch for each algorithm. Using branches can safely preserve a version of code
as master branch while allowing people to testing out as many as other branches
to experiment with other features and ideas. 

How do the diagrams help you visualize the branch structure?

    The diagrams will separate commits for different branches. In this way, we 
can easily inspect commits that were made under various branches. 


